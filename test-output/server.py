#!/usr/bin/env python3
"""jsonplaceholder-api - MCP Server
MCP Server for JSONPlaceholder API

Auto-generated by mcp-generator
"""

import asyncio
import json
import logging
from typing import Any, Dict, Optional
from urllib.parse import urljoin

import httpx
from mcp.server import Server
from mcp.server.stdio import stdio_server
from mcp.types import Tool, TextContent

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Server configuration
BASE_URL = "https://jsonplaceholder.typicode.com/"
TIMEOUT = 30
SERVER_NAME = "jsonplaceholder-api"
SERVER_VERSION = "1.0.0"



class MCPHTTPClient:
    """HTTP client for making requests to the target API."""

    def __init__(self, base_url: str, timeout: int = 30):
        """Initialize HTTP client."""
        self.base_url = base_url
        self.timeout = timeout
        self.client = httpx.AsyncClient(timeout=timeout)

    async def close(self):
        """Close HTTP client."""
        await self.client.aclose()

    def _build_headers(self, additional_headers: Optional[Dict[str, str]] = None) -> Dict[str, str]:
        """Build request headers."""
        headers = {"Content-Type": "application/json"}
        
        
        if additional_headers:
            headers.update(additional_headers)
        
        return headers

    def _build_url(self, endpoint: str, path_params: Optional[Dict[str, Any]] = None) -> str:
        """Build request URL."""
        url = endpoint
        if path_params:
            url = url.format(**path_params)
        return urljoin(self.base_url, url.lstrip("/"))

    async def request(
        self,
        method: str,
        endpoint: str,
        path_params: Optional[Dict[str, Any]] = None,
        query_params: Optional[Dict[str, Any]] = None,
        headers: Optional[Dict[str, str]] = None,
        body: Optional[Dict[str, Any]] = None,
    ) -> Dict[str, Any]:
        """Make HTTP request."""
        url = self._build_url(endpoint, path_params)
        request_headers = self._build_headers(headers)


        try:
            response = await self.client.request(
                method=method,
                url=url,
                params=query_params,
                headers=request_headers,
                json=body,
            )
            response.raise_for_status()
            
            # Try to parse JSON response
            try:
                return response.json()
            except json.JSONDecodeError:
                return {"text": response.text, "status_code": response.status_code}
                
        except httpx.HTTPStatusError as e:
            logger.error(f"HTTP error: {e.response.status_code} - {e.response.text}")
            raise
        except Exception as e:
            logger.error(f"Request failed: {str(e)}")
            raise


# Initialize MCP server
app = Server(SERVER_NAME)
http_client: Optional[MCPHTTPClient] = None


@app.list_tools()
async def list_tools() -> list[Tool]:
    """List available tools."""
    return [
        Tool(
            name="get_post",
            description="Get a specific post by ID",
            inputSchema={
                "type": "object",
                "properties": {
                    "post_id": {
                        "type": "integer",
                        "description": "Post ID",
                    },
                },
                "required": ["post_id"],
            },
        ),
        Tool(
            name="list_posts",
            description="List all posts",
            inputSchema={
                "type": "object",
                "properties": {
                },
                "required": [],
            },
        ),
        Tool(
            name="create_post",
            description="Create a new post",
            inputSchema={
                "type": "object",
                "properties": {
                    "title": {
                        "type": "string",
                        "description": "Post title",
                    },
                    "body": {
                        "type": "string",
                        "description": "Post body",
                    },
                    "userId": {
                        "type": "integer",
                        "description": "User ID",
                    },
                },
                "required": ["title", "body", "userId"],
            },
        ),
        Tool(
            name="get_user",
            description="Get a specific user by ID",
            inputSchema={
                "type": "object",
                "properties": {
                    "user_id": {
                        "type": "integer",
                        "description": "User ID",
                    },
                },
                "required": ["user_id"],
            },
        ),
    ]


@app.call_tool()
async def call_tool(name: str, arguments: Any) -> list[TextContent]:
    """Handle tool calls."""
    global http_client
    
    if http_client is None:
        http_client = MCPHTTPClient(BASE_URL, TIMEOUT)

    try:
if name == "get_post":
            # Extract parameters
            path_params = {}
            query_params = {}
            headers = {}
            body = {}
            
            if "post_id" in arguments:
                path_params["post_id"] = arguments["post_id"]
            
            # Make request
            result = await http_client.request(
                method="GET",
                endpoint="/posts/{post_id}",
                path_params=path_params or None,
                query_params=query_params or None,
                headers=headers or None,
                body=body or None,
            )
            
            return [TextContent(type="text", text=json.dumps(result, indent=2))]
elif name == "list_posts":
            # Extract parameters
            path_params = {}
            query_params = {}
            headers = {}
            body = {}
            
            
            # Make request
            result = await http_client.request(
                method="GET",
                endpoint="/posts",
                path_params=path_params or None,
                query_params=query_params or None,
                headers=headers or None,
                body=body or None,
            )
            
            return [TextContent(type="text", text=json.dumps(result, indent=2))]
elif name == "create_post":
            # Extract parameters
            path_params = {}
            query_params = {}
            headers = {}
            body = {}
            
            if "title" in arguments:
                body["title"] = arguments["title"]
            if "body" in arguments:
                body["body"] = arguments["body"]
            if "userId" in arguments:
                body["userId"] = arguments["userId"]
            
            # Make request
            result = await http_client.request(
                method="POST",
                endpoint="/posts",
                path_params=path_params or None,
                query_params=query_params or None,
                headers=headers or None,
                body=body or None,
            )
            
            return [TextContent(type="text", text=json.dumps(result, indent=2))]
elif name == "get_user":
            # Extract parameters
            path_params = {}
            query_params = {}
            headers = {}
            body = {}
            
            if "user_id" in arguments:
                path_params["user_id"] = arguments["user_id"]
            
            # Make request
            result = await http_client.request(
                method="GET",
                endpoint="/users/{user_id}",
                path_params=path_params or None,
                query_params=query_params or None,
                headers=headers or None,
                body=body or None,
            )
            
            return [TextContent(type="text", text=json.dumps(result, indent=2))]
        else:
            raise ValueError(f"Unknown tool: {name}")
            
    except Exception as e:
        logger.error(f"Tool execution failed: {str(e)}")
        return [TextContent(type="text", text=f"Error: {str(e)}")]


async def main():
    """Run the MCP server."""
    global http_client
    
    logger.info(f"Starting {SERVER_NAME} v{SERVER_VERSION}")
    logger.info(f"Target API: {BASE_URL}")
    
    try:
        async with stdio_server() as (read_stream, write_stream):
            await app.run(read_stream, write_stream, app.create_initialization_options())
    finally:
        if http_client:
            await http_client.close()


if __name__ == "__main__":
    asyncio.run(main())